auth.auth_controller.authenticate_user.bad_credentials=Bad credentials

auth.payload.request.login_request.username.not_blank=Username must not be blank
auth.payload.request.login_request.password.not_blank=Password must not be blank

auth.payload.request.login_request.username.not_blank=Name must not be blank
auth.payload.request.login_request.email.not_blank=Email must not be blank
auth.payload.request.login_request.email.email=Email must be a valid format
auth.payload.request.login_request.password.not_blank=Password must not be blank
auth.payload.request.login_request.password.pattern=Password must contain at least 4 letters
auth.payload.request.login_request.githubToken.not_blank=You must provide a GitHub token

user.model.gv_user.username.not_blank=Name must not be blank
user.model.gv_user.email.email=Email must be a valid format
user.model.gv_user.avatarUrl.url=Avatar URL must be valid
user.model.gv_user.password.pattern=Password must not be empty
user.model.gv_user.githubToken.not_blank=You must provide a GitHub token

model.entity.person.username.not_blank=Name must not be blank
model.entity.person.username.unique=Username must be unique
model.entity.person.email.email=Email must be a valid format
model.entity.person.avatarUrl.url=Avatar URL must be valid

relations.repository.model.aliases_dto.username.not_blank=Username must not be blank
relations.repository.model.aliases_dto.aliases.assert_true=There must not be any blank aliases

relations.repository.model.alias_workspace_dto.id.not_null=ID must not be null
relations.repository.model.alias_workspace_dto.githubUser.not_blank=GitHub user must not be blank

api.v1.contributions.owner.repo.time.get.check_issue_number_and_name=You must provide either an ID or a name only, not both.
api.v1.relation.workspace.workspace_name.user_alias.put.response=Updated associated GitHub user of {0}
api.v1.users.user.token.clockify.delete.response=Clockify Token deleted
api.v1.users.id.delete.response=User deleted
